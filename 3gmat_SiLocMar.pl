#!/usr/bin/perl -w
########################################################################
## SiLocMar.pl    identify single locus SSR marker from the ePCR result
## Author: MK Biswas   [ mkbcit@gmail.com ]
##
## Syntax :
##  SiLocMar.pl  abcdef.ePCRout [Note: this is out put file from e-PCR]
##
##   NOTE: this script generate 2 out put file 1: *.slm (for single locus marker file)   
##											   2: *.mls (for multilocus marker file)
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~###

open (IN,"<$ARGV[0]") || die ("\nError: Not found input file (*.ePCRout) !\n\n");

my $filename = $ARGV[0];
$filename =~ s/\.ePCRout//;
open (OUT,">$filename.slm");   ## Out put file for single locus marker 
open (OUT3,">$filename.stat.Sloc" ); ## Out put file contin statistics of Single locus analysis 
 
# print OUT "## Result contina only Single Locus Marker\n==================================================\n";

 
 while (<IN>) {
	chomp; 
## data stracture ::|| [0]AA_chr1	[1]C01P2AA0000003	[2]+	[3]10883	[4]11047	[5]165/165-165	[6]0	[7]0	
	 @data = split(/\t/);
			$ID_SSR_mark  =	$data[1],
			$c++;
			push @array_SSR_ID, $ID_SSR_mark;
	};

my %counts = ();
for (@array_SSR_ID) {
   $counts{$_}++;
}
foreach my $keys (keys %counts) {
   if ($counts{$keys}<2) {
	   #print OUT3 "$keys\tSingle_Locus\tno_loc=$counts{$keys}\n"; 
	   $c_sloc++; 
	  # $sl_id_count = "$keys,$counts{$keys}";
	  # push  @sl_id_count_m, $sl_id_count;
	   
	   
	   push @arry_SLM_id, $keys; ## store Single Locus Marker ID
			}   
   else {
	    #print OUT3 "$keys\tMulti_Locus\tno_loc=$counts{$keys}\n";
		$c_Mloc++; 
	    $ml_id_count = "$keys,$counts{$keys}";

	    push  @ml_id_count_m, $ml_id_count;
	    push @arry_MLM_id, $keys; ## store Multi Locus Marker ID
		push (@MLoc,$counts{$keys}); 
			}

}
   print OUT3 "\n\n\n+++============================================================+++\n";
   print OUT3 "\t Sumarry Statistics of Single Locus Marker Analysis\n";
   print OUT3 "+++============================================================+++\n";
   print OUT3 "No of Single Locus SSR Marker:\t$c_sloc\n";
   print OUT3 "No of Multi  Locus SSR Marker:\t$c_Mloc\n";
   print OUT3 "Total No of Locus Generated by all SSR marker:\t$c\n\n";

   print OUT3 "Single Locus Marker Occupy (Number): \t$c_sloc\t Locus\n";
   print OUT3 "Single Locus Marker Occupy (  %   ): \t",sprintf("%.0f",(($c_sloc/$c)*100)),"\t% Locus\n\n";

   print OUT3 "Multiple  Locus Marker Occupy (Number): \t", ($c - $c_sloc),"\tLocus\n";
   print OUT3 "Multiple  Locus Marker Occupy (  %   ): \t",sprintf("%.0f",((($c - $c_sloc)/$c)*100)),"\t% Locus\n";
   print OUT3 "Each Multiple  Locus Marker Average Occupy: \t",sprintf("%.0f",(($c - $c_sloc)/$c_Mloc)),"\tLocus\n";

## Find  Max and Min Locus occupy by one Multiple Locus SSR marker ---------------------------
    @numbers = sort @MLoc;
	$max_loc = $numbers[0];
    $min_loc = $numbers[0];

    foreach $i (@numbers[1..$#numbers])
    {
        if ($i > $max_loc)
        {
            $max_loc = $i;
        }
        elsif ($i < $min_loc)
        {
            $min_loc = $i;
        }
    }

    print OUT3 "The maximum Locus Occupy by one Multiple Locus SSR Marker:\t " . $max_loc . "\n";
    print OUT3 "The minimum Locus Occupy by one Multiple Locus SSR Marker:\t " . $min_loc . "\n";





## Retrive Single Locus SSR marker 
open (MDB,"<$filename.results") || die ("\nError: Not found input file (*.results) !\n\n");

# DB stracture ---------------------------------------------------------------------------------------------------------
#	[0]	Seq_ID	            [14] SSR_Marker_ID				
#	[1]	SSR_nr.	            [15] Insilico_PCR_product_1				
#	[2]	SSR_type	        [16] FORWARD PRIMER1 (5'-3')	[25]FORWARD PRIMER2 (5'-3')	[34]FORWARD PRIMER3 (5'-3')
#	[3]	SSR	                [17] Tm(°C)	                    [26]Tm(°C)	                [35]Tm(°C)
#	[4]	size	            [18] size	                    [27]size	                [36]size
#	[5]	OnChr_start	        [19] REVERSE PRIMER1 (5'-3')	[28]REVERSE PRIMER2 (5'-3')	[37]REVERSE PRIMER3 (5'-3')
#	[6]	OnChr_end	        [20] Tm(°C)	                    [29]Tm(°C)	                [38]Tm(°C)
#	[7]	SSR_Sl_no	        [21] size	                    [30]size	                [39]size
#	[8]	SSR_with400bp_flSeq	[22] PRODUCT1 size (bp)     	[31]PRODUCT2 size (bp)	    [40]PRODUCT3 size (bp)
#	[9]	SSR_seq_whole	    [23] start (bp)	                [32]start (bp)	            [41]start (bp)
#	[10] SSR_on_New_start	[24] end (bp)	                [33]end (bp)	            [42]end (bp)
#	[11] SSR_on_New_end					                                                [43]Insilico_PCR_product_2
#	[12] SSR_class					                                                    [44]Insilico_PCR_product_3
#	[13] SSR_rich_with						
#-----------------------------------------------------------------------------------------------------------------------

 while (<MDB>) {
	chomp; 
	 @mdbs = split(/\t/);
			$data2 = join(",",@mdbs);
			push @data_a1l_info, $data2;
	};
#=========================================
###  Retrive Single Locus Primer
#=========================================
	foreach $data_all (@data_a1l_info) {
			my @ifo_data = split (/,/, $data_all);
			my	$SSR_id = $ifo_data[14];
			next unless defined $SSR_id; ## remove error SMS during run time 
			my $ifo_data_1 = join ("\t",@ifo_data);

				foreach $SL_marker_id (@arry_SLM_id) {
						if ($SL_marker_id eq $SSR_id) { 
							print OUT "$SSR_id\tSing_Loc=$SSR_id=1\t$ifo_data_1\n";
							$sl_primer_set++;
							}
			 }
			}
##------->

# print OUT "\n\n\n\n\n\n\n\n==================================================\n";
# print OUT "## Result contina only Molti Locus Marker\n==================================================\n";
# print OUT "SSR_id\t F_primer\t R_primer\t PCR_Product\t SSR_motif\t class_SSR\t Rich_SSR_with\t Insilico_PCRProduct\t Multi_Loc\t Chr\n";

#=========================================
###  Retrive Multi Locus Primer
#=========================================
	foreach $data_all (@data_a1l_info) {
			my @ifo_data = split (/,/, $data_all);
			my	$SSR_id = $ifo_data[14];
			next unless defined $SSR_id; ## remove error SMS during run time 
			my $ifo_data_1 = join ("\t",@ifo_data);

				foreach $mlm_info (@ml_id_count_m) {
				
					my @ifo_mlm = split (/,/, $mlm_info);
					my	$mlm_id = $ifo_mlm[0];
					next unless defined $mlm_id; ## remove error SMS during run time 
					my $ifo_mlmdata_1 = join ("=",@ifo_mlm);

						foreach $SL_marker_id (@arry_MLM_id) {
							if ($SL_marker_id eq $SSR_id and  $SL_marker_id eq $mlm_id) { 
								print OUT "$SSR_id\tMulti_Loc=$ifo_mlmdata_1\t$ifo_data_1\n";
								$Ml_primer_set++;
								}
			 }
			}
	}
##------->
print  "\t".$sl_primer_set." Sing, ".$Ml_primer_set." Multi Loc Primer found,";
